// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id             String   @id @default(uuid())
  userId         String
  name           String
  price          Float?     // Standard selling price
  minimumPrice   Float?      // Minimum allowed price for sales
  quantity       Int?       // Current stock quantity
  minimumQuantity Int?       // Minimum stock threshold for restocking alert
  categoryId     String?
  category       Category?  @relation(fields: [categoryId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  PurchasedItem  PurchasedItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Client {
  id          String      @id @default(uuid())
  userId      String
  fullName    String
  clientType  ClientType  @default(REGULAR) // REGULAR or PROFESSIONAL
  purchase    Purchase[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Purchase {
  id             String      @id @default(uuid())
  userId         String
  clientId       String?
  client         Client?      @relation(fields: [clientId], references: [id])
  totalPrice     Float
  paidAmount     Float        @default(0)   // Tracks full/partial payments
  paymentStatus  PaymentStatus @default(UNPAID)
  dueDate        DateTime?    // For pending payments

  purchasedItems PurchasedItem[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model PurchasedItem {
  id          String   @id @default(uuid())
  purchaseId  String
  productId   String
  quantity    Int
  price       Float     // Snapshot of price at the time of purchase

  purchase    Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum ClientType {
  REGULAR
  PROFESSIONAL
}